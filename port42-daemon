#!/usr/bin/env bash
# Port 42 Daemon Manager
# Handles starting/stopping the daemon with proper environment

set -euo pipefail

DAEMON_BIN="port42d"
PID_FILE="/tmp/port42d.pid"
LOG_FILE="$HOME/.port42/daemon.log"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

print_error() {
    echo -e "${RED}❌ $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_info() {
    echo -e "${BLUE}🐬 $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if daemon is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            # PID file exists but process is dead
            rm -f "$PID_FILE"
        fi
    fi
    
    # Also check by process name
    if pgrep -f "$DAEMON_BIN" >/dev/null 2>&1; then
        return 0
    fi
    
    return 1
}

# Start the daemon
start_daemon() {
    if is_running; then
        print_info "Port 42 daemon is already running"
        return 0
    fi
    
    # Check for API key
    if [ -z "${ANTHROPIC_API_KEY:-}" ]; then
        print_warning "No ANTHROPIC_API_KEY found in environment"
        print_info "The daemon needs an API key to enable AI features"
        print_info "Set your key first:"
        print_info "  export ANTHROPIC_API_KEY='your-key-here'"
        return 1
    fi
    
    print_info "Starting Port 42 daemon..."
    
    # Create log directory if needed
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Start daemon with explicit environment
    if command -v "$DAEMON_BIN" >/dev/null 2>&1; then
        env ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY" \
            nohup "$DAEMON_BIN" >> "$LOG_FILE" 2>&1 &
        local pid=$!
        echo $pid > "$PID_FILE"
        
        # Wait a moment and check if it started
        sleep 2
        if is_running; then
            print_success "Port 42 daemon started (PID: $pid)"
            print_info "Log file: $LOG_FILE"
        else
            print_error "Failed to start daemon"
            print_info "Check the log file: $LOG_FILE"
            return 1
        fi
    else
        print_error "port42d not found in PATH"
        print_info "Please install Port 42 first"
        return 1
    fi
}

# Stop the daemon
stop_daemon() {
    if ! is_running; then
        print_info "Port 42 daemon is not running"
        return 0
    fi
    
    print_info "Stopping Port 42 daemon..."
    
    # Try graceful shutdown first
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        kill "$pid" 2>/dev/null || true
        
        # Wait for it to stop
        local count=0
        while kill -0 "$pid" 2>/dev/null && [ $count -lt 10 ]; do
            sleep 1
            count=$((count + 1))
        done
        
        # Force kill if still running
        if kill -0 "$pid" 2>/dev/null; then
            kill -9 "$pid" 2>/dev/null || true
        fi
        
        rm -f "$PID_FILE"
    fi
    
    # Also kill by name in case PID file was wrong
    pkill -f "$DAEMON_BIN" || true
    
    print_success "Port 42 daemon stopped"
}

# Restart the daemon
restart_daemon() {
    stop_daemon
    sleep 1
    start_daemon
}

# Show daemon status
status_daemon() {
    if is_running; then
        print_success "Port 42 daemon is running"
        if [ -f "$PID_FILE" ]; then
            print_info "PID: $(cat "$PID_FILE")"
        fi
        
        # Try to get more info from the daemon
        if command -v port42 >/dev/null 2>&1; then
            port42 status 2>/dev/null || true
        fi
    else
        print_error "Port 42 daemon is not running"
        return 1
    fi
}

# Show usage
usage() {
    echo "Port 42 Daemon Manager"
    echo
    echo "Usage: $0 {start|stop|restart|status}"
    echo
    echo "Commands:"
    echo "  start    - Start the daemon"
    echo "  stop     - Stop the daemon"
    echo "  restart  - Restart the daemon"
    echo "  status   - Show daemon status"
    echo
    echo "Environment:"
    echo "  ANTHROPIC_API_KEY - Required for AI features"
}

# Main
case "${1:-}" in
    start)
        start_daemon
        ;;
    stop)
        stop_daemon
        ;;
    restart)
        restart_daemon
        ;;
    status)
        status_daemon
        ;;
    *)
        usage
        exit 1
        ;;
esac